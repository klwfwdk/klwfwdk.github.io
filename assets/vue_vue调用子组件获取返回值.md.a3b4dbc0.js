import{_ as s,o as a,c as n,O as l}from"./chunks/framework.d98a00e9.js";const u=JSON.parse('{"title":"vue调用子组件方法并获取返回值","description":"","frontmatter":{"title":"vue调用子组件方法并获取返回值","date":"2020-03-30T00:00:00.000Z","tags":["技巧"],"categories":["vue"]},"headers":[],"relativePath":"vue/vue调用子组件获取返回值.md","filePath":"vue/vue调用子组件获取返回值.md","lastUpdated":1683220251000}'),p={name:"vue/vue调用子组件获取返回值.md"},o=l(`<h2 id="常见业务场景" tabindex="-1">常见业务场景 <a class="header-anchor" href="#常见业务场景" aria-label="Permalink to &quot;常见业务场景&quot;">​</a></h2><p>在实际开发过程中，经常碰到需要调用子组件内部的方法来实现某些操作，比如</p><ol><li>要求子组件检查内部form是否符合rules</li><li>要求子组件内部进行刷新获取新的数据</li></ol><p>而且很多时候希望的不是单向的通知子组件执行某些方法，而且希望获得子组件的方法的返回值，已执行不同的操作。比如希望获得组件的内部form检查后将检查结果返回给父组件，父组件获得结果后执行不同的操作</p><h2 id="常见的解决方案" tabindex="-1">常见的解决方案 <a class="header-anchor" href="#常见的解决方案" aria-label="Permalink to &quot;常见的解决方案&quot;">​</a></h2><h3 id="调用子组件方法" tabindex="-1">调用子组件方法 <a class="header-anchor" href="#调用子组件方法" aria-label="Permalink to &quot;调用子组件方法&quot;">​</a></h3><p>网上有两类方法，分别讨论一下</p><h4 id="this-refs-bar-func-params" tabindex="-1">this.$refs[&quot;bar&quot;].func(params) <a class="header-anchor" href="#this-refs-bar-func-params" aria-label="Permalink to &quot;this.$refs[&quot;bar&quot;].func(params)&quot;">​</a></h4><p>这个是最常见的方法，基本其他博客都会提到</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// foo.vue</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">ref</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">/&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">mounted</span><span style="color:#A6ACCD;"> () </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    this.$ref.bar.funca()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// bar.vue</span></span>
<span class="line"><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">export default </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#A6ACCD;">  methods: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">funca</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h4 id="使用-emit-与-on-事件机制" tabindex="-1">使用 <code>$emit</code> 与 <code>$on</code> 事件机制 <a class="header-anchor" href="#使用-emit-与-on-事件机制" aria-label="Permalink to &quot;使用 \`$emit\` 与 \`$on\` 事件机制&quot;">​</a></h4><p>这个方法也是在别人的博客中看到的 <a href="https://cloud.tencent.com/developer/article/1445537" target="_blank" rel="noreferrer">https://cloud.tencent.com/developer/article/1445537</a></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">//我们都知道，vue是单向流，但是有时候我们需要在父组件中主动通知子组件一些信息，使其做出一些响应变化，那么如何在父组件中去主动调用子组件的方法呢？Vue当然给我们提供了方法，如下：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//首先在子组件中进行事件广播</span></span>
<span class="line"><span style="color:#FFCB6B;">created</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">handleChange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">function</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">something handled!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//在父组件中指定子组件的ref，如child，然后通过一下方式调用：</span></span>
<span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$refs[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">child</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">$emit</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">handleChange</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//核心还是事件的分发及相应：$on、$emit。</span></span></code></pre></div><p>其实与上一个方法大同小异，看似使用事件机制更加符合vue事件传值的机制，其实本质上还是使用子组件对象调用的<code>$emit()</code>方法在内部产生了一个事件，然后又在内部使用了<code>$on()</code>对事件进行了监听。本质上和上述方法没有任何区别。</p><h3 id="获取子组件返回值的方法" tabindex="-1">获取子组件返回值的方法 <a class="header-anchor" href="#获取子组件返回值的方法" aria-label="Permalink to &quot;获取子组件返回值的方法&quot;">​</a></h3><p>其实凭借直觉 使用<code>let res = this.$ref.bar.funca()</code>就能获取到子组件的返回值，试验过后的确如此。但是网上依然有人说获取不到返回值，最近的确也碰到过返回值为undefined的问题。</p><p>仔细分析，发现其实纯粹不是vue的问题，而是异步，回调这类的问题导致了函数返回值与预期不符。</p><p>提供三个思路，</p><ol><li>子组件方法返回promise，在内部异步，回调中resolve(),</li><li>使用回调的方法对付回调，直接把想执行的函数传进子组件，在子组件的回调中执行即可</li><li>使用<code>$emti()</code>进行通信，子组件发时间，在父组件上监听，监听后执行相应的操作。这个方法的坏处是，将一个完整的步骤拆分成了三个步骤 对于后期维护来说不太友好</li></ol><blockquote><ol><li>父组件执行子组件函数</li><li>子组件执行完成后发布事件</li><li>父组件监听事件并作出响应</li></ol></blockquote>`,20),e=[o];function t(c,r,i,F,D,y){return a(),n("div",null,e)}const h=s(p,[["render",t]]);export{u as __pageData,h as default};
